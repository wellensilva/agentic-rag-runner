name: docs-pages

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # evita commits com cola acidental dentro do app.py
      - name: Guard contra trechos inválidos no app.py
        run: |
          set -e
          test -f app.py
          if grep -nE '^\s*\*\*\*' app.py; then
            echo "❌ Encontrado marcador '***' no app.py (cola incompleta)."
            exit 1
          fi
          if grep -nE '^\s*-\s*name:\s' app.py; then
            echo "❌ Parece que colou trecho de YAML do Actions dentro do app.py."
            exit 1
          fi
          echo "✓ Guard passou"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node (para gerar HTML/PDF)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm i redoc-cli puppeteer

      - name: Inject secrets
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "❌ OPENAI_API_KEY não configurada (Settings → Secrets → Actions)."
            exit 1
          fi
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" | tee -a $GITHUB_ENV
          if [ -n "${{ secrets.API_ACCESS_TOKEN }}" ]; then
            echo "API_ACCESS_TOKEN=${{ secrets.API_ACCESS_TOKEN }}" | tee -a $GITHUB_ENV
          fi

      - name: Start API
        run: |
          nohup uvicorn app:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
          echo $! > uv.pid
          sleep 3
          head -n 80 uvicorn.log || true

      - name: Wait /health
        run: |
          set +e
          for i in $(seq 1 60); do
            curl -fsS http://127.0.0.1:8000/health && exit 0
            sleep 2
            if [ $((i % 5)) -eq 0 ]; then
              echo "tentativa $i..."
              tail -n 60 uvicorn.log || true
            fi
          done
          echo "❌ Healthcheck falhou"
          echo "---- uvicorn.log (FULL) ----"
          cat uvicorn.log || true
          exit 1

      - name: Download OpenAPI
        run: |
          curl -fsS http://127.0.0.1:8000/openapi.json -o openapi.json
          jq .info openapi.json || true

      - name: Gerar HTML (ReDoc)
        run: |
          npx -y redoc-cli bundle openapi.json -o api-docs.html
          test -s api-docs.html || (echo "❌ Falha ao gerar HTML" && exit 1)

      - name: Gerar PDF (Puppeteer)
        run: |
          node - <<'JS'
          const puppeteer = require('puppeteer');
          const path = require('path');
          (async () => {
            const browser = await puppeteer.launch({args:['--no-sandbox','--disable-setuid-sandbox']});
            const page = await browser.newPage();
            const url = 'file://' + path.join(process.cwd(), 'api-docs.html');
            await page.goto(url, { waitUntil: 'networkidle0' });
            await page.pdf({
              path: 'api-docs.pdf',
              format: 'A4',
              printBackground: true,
              margin: {top:'12mm',bottom:'12mm',left:'8mm',right:'8mm'}
            });
            await browser.close();
          })();
          JS
          test -s api-docs.pdf || (echo "❌ Falha ao gerar PDF" && exit 1)

      - name: Preparar pasta public (HTML + PDF)
        run: |
          mkdir -p public
          cp api-docs.html public/index.html
          cp api-docs.pdf public/api-docs.pdf
          echo "✓ public pronta"

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4