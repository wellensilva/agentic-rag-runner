name: docs-pages

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

# permiss√µes por padr√£o (algumas empresas exigem aqui; de qualquer forma manter)
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Guard contra trechos inv√°lidos no app.py
        run: |
          set -e
          test -f app.py
          if grep -nE '^\s*\*\*\*' app.py; then echo "‚ùå '***' no app.py"; exit 1; fi
          if grep -nE '^\s*-\s*name:\s' app.py; then echo "‚ùå YAML colado no app.py"; exit 1; fi
          echo "‚úì Guard passou"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm i redoc-cli puppeteer

      - name: Inject secrets
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "‚ùå OPENAI_API_KEY n√£o configurada (Settings ‚Üí Secrets ‚Üí Actions)."
            exit 1
          fi
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          if [ -n "${{ secrets.API_ACCESS_TOKEN }}" ]; then
            echo "API_ACCESS_TOKEN=${{ secrets.API_ACCESS_TOKEN }}" >> $GITHUB_ENV
          fi

      - name: Start API
        run: |
          nohup uvicorn app:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
          echo $! > uv.pid
          sleep 3
          head -n 80 uvicorn.log || true

      - name: Wait /health
        run: |
          set +e
          for i in $(seq 1 60); do
            curl -fsS http://127.0.0.1:8000/health && exit 0
            sleep 2
          done
          echo "‚ùå Health falhou"; tail -n 120 uvicorn.log || true; exit 1

      - name: Download OpenAPI
        run: |
          curl -fsS http://127.0.0.1:8000/openapi.json -o openapi.json
          jq .info openapi.json || true

      - name: Gerar HTML (ReDoc)
        run: |
          npx -y redoc-cli bundle openapi.json -o api-docs.html
          test -s api-docs.html || (echo "‚ùå Falha ao gerar HTML" && exit 1)

      - name: Gerar PDF (Puppeteer)
        run: |
          node - <<'JS'
          const puppeteer = require('puppeteer');
          const path = require('path');
          (async () => {
            const browser = await puppeteer.launch({args:['--no-sandbox','--disable-setuid-sandbox']});
            const page = await browser.newPage();
            await page.goto('file://' + path.join(process.cwd(),'api-docs.html'), {waitUntil:'networkidle0'});
            await page.pdf({path:'api-docs.pdf',format:'A4',printBackground:true,margin:{top:'12mm',bottom:'12mm',left:'8mm',right:'8mm'}});
            await browser.close();
          })();
          JS
          test -s api-docs.pdf || (echo "‚ùå Falha PDF" && exit 1)

      - name: Preparar pasta public
        run: |
          mkdir -p public
          cp api-docs.html public/index.html
          cp api-docs.pdf public/api-docs.pdf

      # üëâ configura√ß√£o necess√°ria para Pages (evita o 404)
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact para Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # permiss√µes espec√≠ficas para publicar no Pages
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4